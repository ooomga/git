package net.juntech.service.richtext.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import net.juntech.dao.common.ICommonDao;
import net.juntech.service.base.BaseService;
import net.juntech.service.richtext.IRichTextService;

/**
 * <ul>
 * <li>Dave 2016年12月25日 新建</li>
 * <li>{@link #方法名自动提示}功能描述,方便查找方法</li>
 * </ul>
 *
 */
@Service
public class RichTextServiceImpl extends BaseService  implements IRichTextService {
	
	private static Log log = LogFactory.getLog(RichTextServiceImpl.class);
	
	@Autowired
	private ICommonDao commonDao;
	
	@Override
	public Map<String, Object> getRichTextList(Map<String, Object> params) {
		log.info("getRichTextList:"+params.toString());
		this.init(params);
		params.put("orderBy", "rt.createTime DESC ");
		StringBuffer sql = new StringBuffer("SELECT rt.id,rt.seq,rt.title,rt.image,rt.author,rt.content,")
				.append(" rt.createTime,rt.typeId,rtt.typeName,rt.description,rt.publish ")
				.append(" FROM t_rich_text rt ")
				.append(" INNER JOIN t_rich_text_type rtt ")
				.append(" ON rt.typeId = rtt.id ")
				.append("   WHERE rt.isDeleted=0 ");
		this.sqlBuild(sql, params);
		this.list = commonDao.queryForList(sql.toString(),params);
		this.totalRecords = commonDao.selectCount(sql, params);
		return result();
	}

	@Override
	public Map<String, Object> saveRichText(Map<String, Object> params) {
		log.info("saveRichText:"+params.toString());
		int insert = commonDao.insert(params, "t_rich_text");
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("data", insert);
		boolean isSuccess = insert>0?true:false;
		resultMap.put("success", isSuccess);
		return resultMap;
	}
	
	@Override
	public Map<String, Object> updateRichText(Map<String, Object> params) {
		log.info("updateRichText:"+params.toString());
		int row = commonDao.updateById(params, "t_rich_text");
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("data", row);
		boolean isSuccess = row>0?true:false;
		resultMap.put("success", isSuccess);
		return resultMap;
	}

	@Override
	public Map<String, Object> delRichText(Map<String, Object> param) {
		log.info("delRichText:"+param.toString());
		int row = commonDao.delete(param,  "t_rich_text");
		HashMap<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("data", row);
		boolean isSuccess = row>0?true:false;
		resultMap.put("success", isSuccess);
		return resultMap;
	}

	@Override
	public Map<String, Object> getRichTextInfo(Map<String, Object> params) {
		StringBuffer sql = new StringBuffer("SELECT rt.id,rt.seq,rt.title,rt.image,rt.author,rt.content,")
				.append(" rt.createTime,rt.typeId,rtt.typeName,rt.description,rt.publish ")
				.append(" FROM t_rich_text rt ")
				.append(" INNER JOIN t_rich_text_type rtt ")
				.append(" ON rt.typeId = rtt.id ")
				.append("   WHERE rt.isDeleted=0 and rt.id=:id ");
		return commonDao.queryForMap(sql.toString(), params);
	}

	@Override
	public List<Map<String, Object>> getRichTextTypes(Map<String, Object> params) {
		String sql = "select rtt.id,rtt.typeName from t_rich_text_type rtt ";
		return commonDao.queryForList(sql, params);
	}

	@Override
	public void publishRichText(Map<String, Object> param) {
		String sql = "update t_rich_text set publish=1 where id=:id ";
		commonDao.update(sql, param);
	}

}
