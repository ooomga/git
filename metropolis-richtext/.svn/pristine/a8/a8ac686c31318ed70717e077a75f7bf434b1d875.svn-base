package net.juntech.dao.common.impl;

import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import net.juntech.dao.common.ICommonDao;
import net.juntech.util.UuidUtil;

/**
 * 数据持久操作实现
 * 
 * @author xhl
 *
 */
@Repository
public class CommonDaoImpl implements ICommonDao {

	private static Log log = LogFactory.getLog(CommonDaoImpl.class);

	@Autowired
	private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

	/**
	 * 获取数据库时间
	 * 
	 * @return Date 返回一个Date类型的日期(yyyy-MM-dd hh:MM:ss:sss);
	 * 
	 */
	@Override
	public Date selectDBTime() {
		Date date = namedParameterJdbcTemplate.queryForObject("select now()", new MapSqlParameterSource(), Date.class);
		log.debug("当前数据库系统时间：" + date);
		return date;
	}

	@Override
	public int insert(Map<String, Object> param, String tableName) {
		if(!param.containsKey("id")||param.get("id")==null||"".equals(param.get("id").toString())){
			param.put("id", UuidUtil.generateUuid());
		}
		StringBuffer sql = sqlInsert(param, tableName);
		log.debug("sql:" + sql + " param:" + param);
		int row = 0;
		try {
			row = namedParameterJdbcTemplate.update(sql.toString(), param);
		} catch (Exception e) {
			log.error("数据添加失败");
			throw e;
		}
		return row;
	}

	@Override
	public int insertBatch(List<Map<String, Object>> params, String tableName) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int update(Map<String, Object> param, String tableName) {
		StringBuffer sql = sqlUpdate(param, tableName);
		log.debug("sql:" + sql + " param:" + param);
		int row = 0;
		try {
			row = namedParameterJdbcTemplate.update(sql.toString(), param);
		} catch (Exception e) {
			log.error("数据修改失败");
			throw e;
		}
		return row;
	}
	
	@Override
	public int updateById(Map<String, Object> param, String tableName) {
		StringBuffer sql = sqlUpdateById(param, tableName);
		log.debug("sql:" + sql + " param:" + param);
		int row = 0;
		try {
			row = namedParameterJdbcTemplate.update(sql.toString(), param);
		} catch (Exception e) {
			log.error("数据修改失败");
			throw e;
		}
		return row;
	}

	@Override
	public int updateBatch(List<Map<String, Object>> params, String tableName) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int delete(Map<String, Object> param, String tableName) {
		StringBuffer sql = sqlDelete(param, tableName);
		log.debug("sql:" + sql + " param:" + param);
		int row = 0;
		try {
			row = namedParameterJdbcTemplate.update(sql.toString(), param);
		} catch (Exception e) {
			log.error("数据删除失败");
			throw e;
		}
		return row;
	}

	@Override
	public int deleteBatch(List<Map<String, Object>> params, String tableName) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int selectCount(StringBuffer sql, Map<String, Object> param) {
		String countSql = sql.toString();
		if (true) {
			countSql = countSql.toLowerCase();
		}
		// 删除limit
		int limit = countSql.indexOf("limit");
		countSql = countSql.substring(0, limit);
		// 删除orderBy
		int orderBy = countSql.indexOf("order by");
		if(orderBy>=0){
			countSql = countSql.substring(0, orderBy);
		}
		countSql = "select count(1) from (" + countSql + ") count";
		return namedParameterJdbcTemplate.queryForObject(countSql, param, Integer.class);
	}

	/**
	 * 拼接添加sql
	 * <ul>
	 * <li>xhl 2016年12月26日 新建</li>
	 * </ul>
	 * 
	 * @param param
	 *            添加的数据
	 * @param tableName
	 *            表名
	 * @return
	 */
	private static StringBuffer sqlInsert(Map<String, Object> param, String tableName) {
		StringBuffer sql = new StringBuffer(); // 完整sql
		StringBuffer keySql = new StringBuffer(); // 键sql
		StringBuffer valSql = new StringBuffer(); // 值sql

		Iterator<Entry<String, Object>> iterator = param.entrySet().iterator();
		while (iterator.hasNext()) {
			Entry<String, Object> next = iterator.next();
			String key = next.getKey();
			keySql.append(" ").append(key.toLowerCase()).append(",");
			valSql.append(" :").append(key).append(",");
		}
		// 去除最后一个逗号（,）
		if (keySql != null && keySql.length() >= 0) {
			keySql.deleteCharAt(keySql.length() - 1);
		}
		if (valSql != null && valSql.length() >= 0) {
			valSql.deleteCharAt(valSql.length() - 1);
		}

		sql.append("INSERT INTO ").append(tableName);
		sql.append(" (").append(keySql).append(" )");
		sql.append(" VALUES(").append(valSql).append(" )");
		return sql;
	}
	
	/**
	 * 简单的单表更新，条件为ID
	 * ID肯定不是要更改的列，作为条件就好了
	 * <ul>
	 * <li>Dave 2016年12月29日 新建</li>
	 * </ul>
	 * 
	 * @param param
	 * @param tableName
	 * @return
	 */
	public  StringBuffer sqlUpdateById(Map<String, Object> param, String tableName) {
		if(!param.containsKey("id")||param.get("id")==null||"".equals(param.get("id").toString().trim())){
			throw new RuntimeException(" 用id修改数据拼接sql时没有传ID");
		}
		StringBuffer sql = new StringBuffer(); // 完整sql
		StringBuffer condSql = new StringBuffer(); // 条件sql

		Iterator<String> iterator = param.keySet().iterator();
		while (iterator.hasNext()) {
			String key = iterator.next();
			if(param.get(key)!=null&&!"".equals(param.get(key).toString().trim())){
				condSql.append(key).append(" = :").append(key).append(",");
			}
		}
		// 去除最后一个逗号（,）
		if (condSql != null && condSql.length() >= 0) {
			condSql.deleteCharAt(condSql.length() - 1);
		}
		sql.append("UPDATE  ").append(tableName);
		sql.append(" SET  ").append(condSql);
		sql.append(" WHERE ").append("  id=:id ");
		return sql;
	}
	
	
	
	/**
	 * 拼接修改sql
	 * <ul>
	 * <li>xhl 2016年12月26日 新建</li>
	 * </ul>
	 * 
	 * @param param
	 *            添加的数据
	 * @param tableName
	 *            表名
	 * @return
	 */
	private  StringBuffer sqlUpdate(Map<String, Object> param, String tableName) {
		StringBuffer sql = new StringBuffer(); // 完整sql
		StringBuffer condSql = new StringBuffer(); // 条件sql
		StringBuffer coluSql = new StringBuffer(); // 列sql
		List<String> list = Arrays.asList(param.get("pk").toString().split(",")); // 条件key

		Iterator<String> iterator = param.keySet().iterator();
		while (iterator.hasNext()) {
			String key = iterator.next();

			if (key.equals("pk")) {
				continue;
			}

			if (list.contains(key)) {
				condSql.append(key).append("=:").append(key).append(" AND ");
			} else {
				coluSql.append(key).append("=:").append(key).append(",");
			}

		}

		// 去除最后一个逗号（,）
		if (coluSql != null && coluSql.length() >= 0) {
			coluSql.deleteCharAt(coluSql.length() - 1);
		}
		// 去除最后一个and连接符（AND）
		if (condSql != null && condSql.length() >= 0) {
			int lastIndexOf = condSql.toString().toLowerCase().lastIndexOf("and");
			condSql.delete(lastIndexOf, condSql.length());
		}

		sql.append("UPDATE ").append(tableName);
		sql.append(" SET ").append(coluSql);
		sql.append(" WHERE ").append(condSql);
		return sql;
	}

	private StringBuffer sqlDelete(Map<String, Object> param, String tableName) {
		StringBuffer sql = new StringBuffer(); // 完整sql
		StringBuffer condSql = new StringBuffer(); // 条件sql
		Iterator<String> iterator = param.keySet().iterator();
		while (iterator.hasNext()) {
			String key = iterator.next();
			if (key.equals("pk")) {
				continue;
			}
			condSql.append(key).append("=:").append(key).append(" AND ");
		}

		// 去除最后一个and连接符（AND）
		if (condSql != null && condSql.length() >= 0) {
			int lastIndexOf = condSql.toString().toLowerCase().lastIndexOf("and");
			condSql.delete(lastIndexOf, condSql.length());
		}
		sql.append("DELETE FROM ").append(tableName).append(" WHERE ").append(condSql);
		return sql;
	}

	/**
	 * 查询list
	 * <ul>
	 * <li>Dave 2016年12月29日 新建</li>
	 * </ul>
	 * 
	 * @param sql
	 * @param params
	 * @return
	 */
	@Override
	public List<Map<String, Object>> queryForList(String sql, Map<String, Object> params) {
		return this.namedParameterJdbcTemplate.queryForList(sql, params);
	}

	@Override
	public <T> T queryForObject(String sql, Map<String, Object> params, Class<T> c) {
		return this.namedParameterJdbcTemplate.queryForObject(sql, params, c);
	}

	@Override
	public Map<String, Object> queryForMap(String sql, Map<String, Object> params) {
		return this.namedParameterJdbcTemplate.queryForMap(sql, params);
	}

	@Override
	public int update(String sql, Map<String, Object> params) {
		return namedParameterJdbcTemplate.update(sql, params);
	}
	

}
